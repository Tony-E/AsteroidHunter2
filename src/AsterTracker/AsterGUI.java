/*********************************************************************************************************************
 *                                            Class AsterGUI
 *********************************************************************************************************************/
package AsterTracker;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.concurrent.CyclicBarrier;
import java.util.logging.Level;
import javax.swing.Timer;
import javax.swing.text.DefaultCaret;

/**
 * <p>This is the main Graphical User Interface (GUI) and user event processor. It include the
 * Main method - i.e. is the start point for execution of the program.</p>
 * 
 * @author Tony Evans
 */
public class AsterGUI extends javax.swing.JFrame {
    
    /** The display manager controls what is being displayed. */
    public  DisplayManager displayManager; 
    
    /** The SuperGroup performs cross-group functions. */
    public  SuperGroup superGroup;           
    
    /* local variables */
    private ArrayList<ImageGroup> groups;     // A set of ImageGroups created to hold the FITS
    private Timer timer;                      // Timer to control blinking and status checking
    private final ActionListener timerTick;   // Where to go when timer fires
    private Settings  settings;               // common control parameters
    private final Pixel mouse=new Pixel(0,0); // Where the mouse is currently in the displayed image
    
    /* processing thread control objects */
    private Processor[] processors;           // list of Process executors    
    private Thread[] threads;                 // list of threads running Process executors
    private CyclicBarrier synchLock;          // Cyclic Barrier used to synchronise processing threads
    
    private final DecimalFormat df1 = new DecimalFormat("##0.00");    // formatters

   /**
    * Constructor builds the GUI and initialises the application.
    */
    public AsterGUI() {
        
        // set up the action when the timer fires
        this.timerTick = (ActionEvent e) -> {doTimerTick();};
        
        // build the GUI
        initComponents();
        
        // make the comments area scroll when appended to from other threads 
        DefaultCaret caret = (DefaultCaret) comment.getCaret();
        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
       
        // initialise application
        initApplication();
    }

    /**
     *  The following code creates the GUI and is generated by Netbeans. Do not mess with it!
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        showStack = new javax.swing.ButtonGroup();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jScrollPane1 = new javax.swing.JScrollPane();
        comment = new javax.swing.JTextArea();
        mousePosition = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        motion = new javax.swing.JLabel();
        pa = new javax.swing.JLabel();
        displayScrollPane = new javax.swing.JScrollPane();
        drawing = drawing = new AsterTracker.ImageDisplay(this);
        viewing = new javax.swing.JTextField();
        infobar = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        blinkButton = new javax.swing.JRadioButton();
        objectOnly = new javax.swing.JRadioButton();
        pauseButton = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();

        jMenuItem2.setText("jMenuItem2");

        jMenu1.setText("jMenu1");

        jMenu2.setText("File");
        jMenuBar1.add(jMenu2);

        jMenu3.setText("Edit");
        jMenuBar1.add(jMenu3);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Tony's Asteroid Hunter");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                doClose(evt);
            }
        });

        jScrollPane1.setAutoscrolls(true);
        jScrollPane1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        comment.setColumns(20);
        comment.setFont(new java.awt.Font("Times New Roman", 0, 13)); // NOI18N
        comment.setLineWrap(true);
        comment.setRows(5);
        comment.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane1.setViewportView(comment);

        mousePosition.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        mousePosition.setText("X,Y");

        jButton3.setText(">");
        jButton3.setToolTipText("Go to next possible Mover without selecting yes or no.");
        jButton3.setFocusable(false);
        jButton3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextMover(evt);
            }
        });

        motion.setText("Motion");

        pa.setText("PA");

        displayScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        displayScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        drawing.setBackground(new java.awt.Color(51, 51, 51));
        drawing.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        drawing.setMinimumSize(new java.awt.Dimension(1024, 1024));
        drawing.setPreferredSize(new java.awt.Dimension(1024, 1024));
        drawing.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                mouseMove(evt);
            }
        });
        drawing.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                doMouseDown(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                doMouseUp(evt);
            }
        });
        drawing.setLayout(new java.awt.GridLayout(1, 0));
        displayScrollPane.setViewportView(drawing);

        viewing.setText("View mover:");
        viewing.setToolTipText("Information about the Mover currently displayed.");

        infobar.setText("Info.");

        jButton2.setText("<");
        jButton2.setToolTipText("Go to previous Mover without selecting yes or no.");
        jButton2.setFocusable(false);
        jButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousMover(evt);
            }
        });

        jButton1.setText("Yes");
        jButton1.setToolTipText("Select that this Mover is probably real and move to the next one.");
        jButton1.setFocusable(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doKeep(evt);
            }
        });

        jButton4.setText("No");
        jButton4.setToolTipText("Select that this Mover is probably a false detection and move to the next one.");
        jButton4.setFocusable(false);
        jButton4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton4.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doDiscard(evt);
            }
        });

        blinkButton.setSelected(true);
        blinkButton.setText("Blink");
        blinkButton.setToolTipText("Switch on/off blinking.");
        blinkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doBlink(evt);
            }
        });

        objectOnly.setText("Object Only");
        objectOnly.setToolTipText("View an object in the Object Stack without fixed stars.");
        objectOnly.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setObjectOnly(evt);
            }
        });

        pauseButton.setText("Pause & Review");
        pauseButton.setToolTipText("Pauses the search and allows user to review the Movers found so far. If already paused, resume the search.");
        pauseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doPause(evt);
            }
        });

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        openMenuItem.setMnemonic('o');
        openMenuItem.setText("Open");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doSelectFiles(evt);
            }
        });
        fileMenu.add(openMenuItem);

        jMenuItem5.setText("Savelog");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doSaveLog(evt);
            }
        });
        fileMenu.add(jMenuItem5);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        jMenuItem1.setText("Settings");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doSettings(evt);
            }
        });
        fileMenu.add(jMenuItem1);

        menuBar.add(fileMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(viewing)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jButton2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton4)
                                        .addGap(29, 29, 29)
                                        .addComponent(pauseButton))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(motion, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(10, 10, 10)
                                        .addComponent(pa, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(34, 34, 34)
                                        .addComponent(mousePosition, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(blinkButton)
                                    .addComponent(objectOnly))))
                        .addGap(30, 30, 30)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 435, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(displayScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(infobar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButton1, jButton2, jButton3, jButton4});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton3)
                            .addComponent(jButton1)
                            .addComponent(jButton4)
                            .addComponent(jButton2)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(objectOnly, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(pauseButton)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(motion)
                            .addComponent(pa)
                            .addComponent(mousePosition)
                            .addComponent(blinkButton))
                        .addGap(12, 12, 12)
                        .addComponent(viewing, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(10, 10, 10)
                .addComponent(displayScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 650, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(infobar)
                .addGap(15, 15, 15))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Create the Settings and Supergroup.
     */
    private void initApplication() {
        settings =  new Settings(this);
        settings.init();
        superGroup = new SuperGroup(settings, comment);
    }
   
    /** Action on exit (none). */
    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed
    
    /**
     * User selects File/Open. Select FITS files and load them into groups. 
     * Various preparations are made then all the processing threads are started. 
     */
    private void doSelectFiles(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doSelectFiles

        // Select and load the FITS and gather them into groups 
        groups = superGroup.initGroups();
        
        // Check we have some groups and FITS
        if (groups.isEmpty()) {
            comment.append("No Image Groups formed. \n");
            return;
        }
        if (groups.size()<3) {
            comment.append("Insufficient stacking groups. \n");
            return;
        }

        // The Supergroup sets up cross-group reference data and settings
        superGroup.setReference();
        
        // Set up a display manager and default to showing Group Stacks
        displayManager = new DisplayManager(displayScrollPane, drawing, groups);
        settings.showType = 1;

        // Set up a timer for blinking
        timer = new Timer(1000, timerTick);
        timer.start();

        // Create the image processing Processors and start their threads. */
        doProcessors(1);       
    }//GEN-LAST:event_doSelectFiles
   
    /** 
    * Create the processors and threads that drive the synthetic tracking and search for Movers. 
    */ 
    private void doProcessors(int phase) {
        
        // define the processors and their roles */
        threads = new Thread[4];                 // there are 4 Threads
        processors = new Processor[4];           // each thread runs a processor
        synchLock  = new CyclicBarrier(4);       // a CyclicBarrier keeps them synchronised.
        
        int[] pType = {1,1,1,2};                 // type 1 drives group processing, type 3 drives the Supergroup
        int[] gno = {0,1,2,0};                   // whic group each processor is responsible for 
        
        // Create and start the processors and threads. 
        for (int i = 0; i<4; i++) {
            processors[i] = new Processor(settings, pType[i], gno[i], groups, superGroup, synchLock, phase);
            threads[i] = new Thread(processors[i]);
            threads[i].setName("Asterthread"+i);
            threads[i].start();
        }
        
        // Note. As this method completes all the processors start running and processing images.
    }
    
    /**
     * Record mouse activity.
     * @param evt Event contains details of mouse position.
     */
    private void doMouseDown(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_doMouseDown
        mouse.x = evt.getX();
        mouse.y = evt.getY();
    }//GEN-LAST:event_doMouseDown
    private void doMouseUp(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_doMouseUp
        mouse.x=      evt.getX()-mouse.x;
        mouse.y=      evt.getY()-mouse.y;
    }//GEN-LAST:event_doMouseUp
    private void mouseMove(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mouseMove
        int x = evt.getX();
        int y = evt.getY();
        mousePosition.setText("x="+x+" y="+y);
    }//GEN-LAST:event_mouseMove
  
   /**
    *Next button pressed to show next available Mover.            
    */
    private void nextMover(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextMover
       doMovers(true);
    }//GEN-LAST:event_nextMover
   
   /**
    * Go to showing next or previous Mover and set it up ready for display. 
    * @para b True=next or false=previous Mover.
    */
    private void doMovers(boolean b) {
        
        // stop the  timer while we do this as it could take a while
        timer.stop();
        
        // the SuperGoup selects the next Mover and puts it in settings 
        superGroup.nextMover(b);
        Mover m = settings.targetMover;
         
        // If no mover to show, remove the Mover details from the screen 
        if (m == null) {
            viewing.setText("  ");
            
        // If mover available, show its details and prepare to blink it
        } else {
            // setup ready to draw the next mover
            settings.showType = 4;              // show the Mover overlayed on stars
            displayManager.groupIndex = 0;      // start display at the first group 
            doMoverInfo(m);                     // display info about the Mover
            settings.blink = false;             // blink normally
            
            // re-stack and re-draw image with the Mover's motion and PA
            for (ImageGroup g : groups) {
               g.reStack(true);
               g.reDraw();
               g.draw();
            }
            // blink
            settings.blink = true;
        }
        
        // restart the timer to resume bliking
        timer.start();
    }
    
    /**
     * Display information about the current Mover in the GUI.
     * @param m The Mover being displayed.
     */ 
    private void doMoverInfo(Mover m) {
        PixelF p = m.objects.get(0).location;
        String txt = "Mover x=" + (int) p.x + " y=" + (int) p.y;
        txt += " PA=" + df1.format(Math.toDegrees(m.PA));
        txt += " Motion=" + df1.format(m.motion) + " Staus: ";
        txt += " Score=" + df1.format(m.score);
        if (m.status) {txt+=" Keep";} else {txt+=" Discard";}
        viewing.setText(txt); 
    }
   
    /**
    * User has selected File/Settings so open settings dialog and populate it with current values.
    * @param evt 
    */
    private void doSettings(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doSettings
       // open a settings dialog, populate the fields and show it
       SettingsDialog sd = new SettingsDialog(this,true,settings);
       sd.setParams();
       sd.setVisible(true);
    }//GEN-LAST:event_doSettings

   /**
    * User selects to see previous mover.
    * @param evt 
    */
    private void previousMover(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousMover
        doMovers(false);
    }//GEN-LAST:event_previousMover
    /**
     * User selects this Mover is probably real.
     * @param evt 
     */
    private void doKeep(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doKeep
        // if there is a Mover showing, set its status, show its status and go to the next Mover
        if (settings.targetMover != null) {
            settings.targetMover.status = true;
            doMoverInfo(settings.targetMover);
            nextMover(evt);
        }
    }//GEN-LAST:event_doKeep
    
    /**
     * User selects this Mover is probably a false detection.
     * @param evt 
     */
    private void doDiscard(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doDiscard
        // if there is a Mover showing, set its status, show its status and go to the next Mover
        if (settings.targetMover != null) {
            settings.targetMover.status = false;
            doMoverInfo(settings.targetMover);
            nextMover(evt);
        }
    }//GEN-LAST:event_doDiscard
    
    /**
     * Toggle showing the object-only view of a Mover
     * @param evt 
     */
    private void setObjectOnly(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setObjectOnly
        // if there is a Mover showing reset the mode of object display and redraw
        if (settings.targetMover != null) {
            settings.objectOnly = objectOnly.isSelected();
            reDraw();
        } else {
            settings.objectOnly = objectOnly.isSelected();
            reDraw();
        }

    }//GEN-LAST:event_setObjectOnly
    /**
     * Action on window close (none)
     * @param evt 
     */
    private void doClose(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_doClose
        
    }//GEN-LAST:event_doClose
    /**
     * User has selected to save the log file.
     * @param evt 
     */
    private void doSaveLog(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doSaveLog
        // Create a Logger and use it to record a log
        Logger log = new Logger(settings);
        log.open();
        log.save(superGroup.movers);
        log.closeLog();
        comment.append("Log saved.\n");   
    }//GEN-LAST:event_doSaveLog
   
    /**
     * User changed status of the blink button.
     * @param evt 
     */
    private void doBlink(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doBlink
        settings.blink = blinkButton.isSelected();
    }//GEN-LAST:event_doBlink
    /**
     * User pressed the Pause button. Interrupt the search and switch to presenting movers or
     * return to searching.
     * @param evt 
     */
    private void doPause(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doPause
        // toggle the "paused" setting to halt or re-start the search for Movers 
        settings.paused = !settings.paused;
        
        // if now paused wait a second for the movers queue to finish processing befor sorting
        // (note it is still possible for the odd Mover to get created after this, in which case it may not
        //  be sorted into the right position)
        if (settings.paused) {
            try {
                Thread.sleep(1000);
            } catch (InterruptedException ex) {
                java.util.logging.Logger.getLogger(AsterGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            pauseButton.setText("Resume Search");
            superGroup.sortMovers();
            nextMover(evt);
        // else set up to resume searching for Movers
        } else {
            pauseButton.setText("Pause & Review");
            settings.targetMover = null;
        }
    }//GEN-LAST:event_doPause
   
    /** 
     * Instruct all groups they must re-draw image buffers next time an image is requested. 
     */
    private void reDraw() {
        for (ImageGroup grps : groups) {
            grps.reDraw();
        }
    }
    
    /**
     * When the timer fires check to see if an image needs to be blinked. 
     */
    private void doTimerTick() {

       // stop the timer while we do what needs to be done
        timer.stop();
        
       // instruct the displayManager to blink (except if blinking has been switched off)
        if (settings.blink) {
            displayManager.showNext(settings.targetMover);
        }
        
       // update the info in the status line and restart the Timer 
        showInfo();
        timer.start();
    }
    
    /**
     * Show info in status line at bottom of window.
     */
    public void showInfo() {
        String txt = "Settings: "+settings.settingsFile.getName();
        if (displayManager != null) {
            int g =  displayManager.groupIndex;
            txt+=" Group:"+ g + " Obs:" + groups.get(g).obCount + " Trks:" + superGroup.trk0Count + 
                    "; " + superGroup.trk1Count + " Sigma: " + df1.format(settings.sigma1);
        }
        infobar.setText(txt);
        motion.setText(""+settings.motion);
        pa.setText(""+settings.PAdeg);
        
    }


    /******************************************************************************************************************
     * System Generated Main is the entry point.
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AsterGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new AsterGUI().setVisible(true);
        });
    }
    // These variables are elements of the GUI created by Netbeans
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton blinkButton;
    private javax.swing.JTextArea comment;
    private javax.swing.JScrollPane displayScrollPane;
    private javax.swing.JPanel drawing;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JLabel infobar;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JLabel motion;
    private javax.swing.JLabel mousePosition;
    private javax.swing.JRadioButton objectOnly;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JLabel pa;
    private javax.swing.JButton pauseButton;
    private javax.swing.ButtonGroup showStack;
    private javax.swing.JTextField viewing;
    // End of variables declaration//GEN-END:variables


}
